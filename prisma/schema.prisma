// /var/www/nomadnet-ecommerce/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                String   @id @default(cuid())
  email             String   @unique
  stripeCustomerId  String   @unique
  firstName         String?
  lastName          String?
  phone             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  orders            Order[]
  subscriptions     Subscription[]
  
  @@map("customers")
}

model Order {
  id                    String   @id @default(cuid())
  stripeSessionId       String   @unique
  stripePaymentIntentId String?
  customerId            String
  customer              Customer @relation(fields: [customerId], references: [id])
  
  status                OrderStatus @default(PENDING)
  totalAmount           Int
  currency              String @default("usd")
  
  shippingFirstName     String
  shippingLastName      String
  shippingAddress       String
  shippingCity          String
  shippingState         String?
  shippingZipCode       String
  shippingCountry       String @default("US")
  
  trackingNumber        String?
  shippedAt             DateTime?
  deliveredAt           DateTime?
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  orderItems            OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id          String @id @default(cuid())
  orderId     String
  order       Order  @relation(fields: [orderId], references: [id])
  
  productId   String
  productName String
  price       Int
  quantity    Int
  
  @@map("order_items")
}

model Subscription {
  id                   String   @id @default(cuid())
  stripeSubscriptionId String   @unique
  customerId           String
  customer             Customer @relation(fields: [customerId], references: [id])
  
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean @default(false)
  canceledAt           DateTime?
  
  planId               String
  planName             String
  planPrice            Int
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@map("subscriptions")
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}